alias usbguard='sudo usbguard'
alias cd..='cd ..'
alias shellescape='sed -e "s/\([\ ()]\)/\\\\1/g"'
alias sctl=systemctl
alias pass=gopass
alias g=git
alias o=xdg-open

alias dotfiles="cd  ~/.local/share/chezmoi/"

pcr_print() {
  pcrs=/sys/class/tpm/tpm0/pcr-sha1
  for a in $(seq 0 23); do echo -ne "$a:\t"; cat "${pcrs}/$a";done
}

json2yaml() {
  cat | python -c 'import sys, yaml, json; print(yaml.dump(json.loads(sys.stdin.read())))'
}

alias unlock_srv='gopass show -o -n layer8.fail/encroot/md2|  ssh -i ~/.ssh/hetzner -oPort=222 root@cockburn.tech unlock'
alias unlock_l8f='gopass show -o -n l8.wtf/crypt/rootfs | ssh -i ~/.ssh/hetzner -oPort=222 root@l8.wtf unlock'
alias unlock_amarula='gopass show -o -n amarula/luks/rootfs | ssh -i ~/.ssh/amarula -oPort=222 root@10.10.42.200 unlock'

# Try to avoid nested ranger instances
ranger() {
  if [ -z "$RANGER_LEVEL" ]; then
    /usr/bin/ranger "$@"
  else
    exit
  fi
}

kshowSecrets() {
  cat | yq '.data | map_values(@base64d)'
}

alias k=kubectl
alias tf=terraform
which tofu &>/dev/null && alias tf=tofu # prefer opentofu

kswitch() {
  opts=
  [[ -n "$1" ]] && opts="--query=$1"
  export KUBECONFIG=$(ls ~/.kube/*.json | fzf $opts)
}

kDeleteReleasedPVs() {
  k delete pv $(k get pv -o=jsonpath='{.items[?(@.status.phase=="Released")].metadata.name}')
}

yaml_flatten() {
  file="$1"
  [[ -f "$file" ]] || { echo No file given; return }
  yq -y '[tostream | select(has(1)) | first |= join(".") | {key: first, value: last}] | from_entries' "$file"
}

to_helm_values() {
  file="$1"
  [[ -f "$file" ]] || { echo No file given; return }
  OIFS="$IFS"
  IFS=$'\n'
  for entry in $(yaml_flatten "$file"); do
    k="${entry%:*}"
    v="${entry#*: }"
    cat <<EOF
- name: $k
  value: $v
EOF
  done
  IFS="$OIFS"
}

renovate_validate() {
    docker run -it --rm -v $(pwd)/renovate.json:/usr/src/app/renovate.json5 renovate/renovate renovate-config-validator
}

git-clean-branches() {
  git fetch -p ; git branch -r | awk '{print $1}' | grep -E -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -D
}

image_digest() {
  [[ -z "$1" ]] && {
    echo image reference must be set
    return
  }
  docker image inspect "$1" | jq -r '.[0].RepoDigests[0]' | cut -d@ -f2
}

kube-get-all-images() {
  # see https://kubernetes.io/docs/tasks/access-application-cluster/list-all-running-container-images/
  kubectl get pods --all-namespaces -o go-template --template="{{range .items}}{{range .spec.containers}}{{.image}} {{end}}{{end}}" | tr ' ' \\n
}

get-vcluster-kubeconfig() {
  [[ "$#" -lt 1 ]] && {
    echo You need to give the name of the instance, e.g. instance-e2e
    return
  }
  instance="$1"
  kubectl get secret -n "$instance" "${instance}-vcluster" -o json | jq -r .data.config | base64 -d > "${HOME}/.kube/${instance}.json"
}

annotate-external-secrets() {
  for es in $(kubectl get es -A -o go-template --template '{{ range .items}}{{.metadata.namespace}}:{{ .metadata.name}}{{"\n"}}{{end}}'); do
    kubectl annotate es -n ${es%%:*} ${es##*:} force-sync=$(date +%s) --overwrite
  done
}

get-edgecluster-config() {
  [[ "$#" -lt 1 ]] && {
    echo You need to give the name of the instance, e.g. instance-e2e
    return
  }
  instance="$1"
  kubectl get secret -n default "${instance}-kubeconfig" -o json | jq -r .data.value | base64 -d > "${HOME}/.kube/${instance}.json"
}

run-jaeger() {
  docker rm -f jaeger &>/dev/null
  docker run -d --name jaeger \
    -e COLLECTOR_OTLP_ENABLED=true \
    -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
    -p 5775:5775/udp \
    -p 6831:6831/udp \
    -p 6832:6832/udp \
    -p 5778:5778 \
    -p 16686:16686 \
    -p 14250:14250 \
    -p 14268:14268 \
    -p 14269:14269 \
    -p 4317:4317 \
    -p 4318:4318 \
    -p 9411:9411 \
    jaegertracing/all-in-one:1.62.0
  URL='http://localhost:16686'
  echo "The UI is available at $URL"
  xdg-open "$URL"
}

debug-talos() {
  HOST=${1:-192.168.122.47}
  ssh -o UserKnownHostsFile=/dev/null "root@$HOST"
}
